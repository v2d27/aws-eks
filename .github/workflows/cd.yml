name: App Deployment

on:
  workflow_dispatch:
    inputs:
      registry:
        required: true
        type: choice
        options:
        - real-time-chat-app-backend
        - real-time-chat-app-frontend
      environment:
        required: true
        type: choice
        options:
        - eks-main
        - eks-develop

  workflow_call:
    inputs:
      registry:
        description: 'Docker registry to use for deployment'
        required: true
        type: string
      environment:
        description: 'Environment to deploy'
        required: true
        type: string

concurrency:
  group: cd-${{ github.repository_id }}-${{ inputs.environment }}-${{ inputs.registry }}
  cancel-in-progress: true

env:
  docker_user: hercules9
  author: Hercules

jobs:
  build-and-push:
    name: Building image ${{ inputs.registry }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      image: ${{ steps.get.outputs.tags }}
      service_name: ${{ steps.get.outputs.service_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get Metadata
        id: get
        run: |
          echo "tags=${{ env.docker_user }}/${{ inputs.registry }}:${{ github.ref_name }}-${{ github.sha || github.run_id }}" >> $GITHUB_OUTPUT
          echo "cache=${{ env.docker_user }}/${{ inputs.registry }}:cache" >> $GITHUB_OUTPUT
          echo "labels=org.opencontainers.image.revision=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "author=org.opencontainers.image.authors=${{ env.author }}" >> $GITHUB_OUTPUT
          echo "platforms=linux/amd64,linux/arm64" >> $GITHUB_OUTPUT
          registry="${{ inputs.registry }}"
          registry=$(echo "${registry##*-}")
          echo "context=./app/$registry" >> $GITHUB_OUTPUT
          echo "dockerfile=./app/$registry/Dockerfile" >> $GITHUB_OUTPUT
          echo "service_name=chat-$registry-service" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.get.outputs.tags }}
          context: ${{ steps.get.outputs.context }}
          file: ${{ steps.get.outputs.dockerfile }}
          platforms: ${{ steps.get.outputs.platforms }}
          cache-to: type=registry,ref=${{ steps.get.outputs.cache }},mode=max,oci-mediatypes=true
          cache-from: type=registry,ref=${{ steps.get.outputs.cache }}
          labels: |
            ${{ steps.get.outputs.labels }}
            ${{ steps.get.outputs.author }}

  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: ${{ inputs.environment }}
    env:
      image: ${{ needs.build-and-push.outputs.image }}
      service_name: ${{ needs.build-and-push.outputs.service_name }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.GHA_BOT_APP_ID }}
          private-key: ${{ secrets.GHA_BOT_PRIVATE_KEY }}
          
      - name: Get GitHub App User ID
        id: get-user-id
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"

      - name: Install Kustomize
        uses: imranismail/setup-kustomize@v2.1.0

      - name: Update new deployment image
        run: |
          echo "Updating deployment image for $service_name in ${{ github.ref_name}}"
          cd ${{ github.workspace }}/manifest/services/$service_name/overlays/${{ github.ref_name}}
          kustomize edit set image deployment-image=${{ env.image }}
          kustomize build .
          echo "----- Validating kustomization.yml -----"
          cat kustomization.yml

      - name: Commit changes
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'

          git add ./manifest/services/$service_name/overlays/${{ github.ref_name }}/kustomization.yml
          git commit -m "bot: Deploying $service_name to ${{ github.ref_name }}"

          MAX_RETRIES=10
          RETRY_COUNT=0

          until git pull --rebase && git push; do
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "Retry attempt $RETRY_COUNT due to rebase/push conflict..."
            
            if [[ $RETRY_COUNT -ge $MAX_RETRIES ]]; then
              echo "Failed to rebase and push after $MAX_RETRIES attempts."
              exit 1
            fi

            # Delay before retrying
            sleep 2
          done
